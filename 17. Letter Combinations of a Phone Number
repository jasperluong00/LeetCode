class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        numToLetter = {"2":["a","b","c"], "3":["d","e","f"], "4":["g","h","i"],\
        "5":["j","k","l"], "6":["m","n","o"], "7":["p","q","r","s"], "8":["t","u","v"],\
        "9":["w","x","y","z"]}
        if not digits: return []
        res = [c for c in numToLetter[digits[0]]]
                # 22
                #  a        b        c
                #/ | \    / | \    / | \
                #a b  c  a. b  c. a. b  c
                # aa, ab, ac, ba, bb, bc, ca, cb, cc
        def dfs(res, digits):
            if not digits: return res.copy()
            current = digits[0]
            # generates combos from res, puts it all into a temp, sets res to temp
            temp = []
            if len(digits) >= 1:
                for c in numToLetter[current]:
                    for combo in res:
                        combo = combo + c
                        temp.append(combo)
                res = temp.copy()
            return dfs(res, digits[1:])
        return dfs(res, digits[1:])
